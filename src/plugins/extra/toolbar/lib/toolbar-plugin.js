// Generated by CoffeeScript 1.3.3
(function() {

  define(["aloha", "aloha/plugin", "ui/ui", '../../appmenu/appmenu', "i18n!format/nls/i18n", "i18n!aloha/nls/i18n", "aloha/console", "css!toolbar/css/toolbar.css"], function(Aloha, Plugin, Ui, appmenu, i18n, i18nCore) {
    var CONTAINER_JQUERY;
    CONTAINER_JQUERY = jQuery('.toolbar');
    if (CONTAINER_JQUERY.length === 0) {
      CONTAINER_JQUERY = jQuery('<div></div>').addClass('toolbar-container aloha').appendTo('body');
    }
    /*
       register the plugin with unique name
    */

    return Plugin.create("toolbar", {
      init: function() {
        var applyHeading, h, headingButtons, headingsButton, labels, order;
        CONTAINER_JQUERY.find('.action').addClass('disabled missing-a-click-event');
        CONTAINER_JQUERY.find('a.action').parent().addClass('disabled missing-a-click-event');
        Ui.adopt = function(slot, type, settings) {
          var $buttons, ItemRelay, squirreledEditable;
          $buttons = CONTAINER_JQUERY.find(".action." + slot);
          $buttons.add($buttons.parent()).removeClass('disabled missing-a-click-event');
          ItemRelay = (function() {

            function ItemRelay(items) {
              this.items = items;
            }

            ItemRelay.prototype.show = function() {
              return $buttons.removeClass('hidden');
            };

            ItemRelay.prototype.hide = function() {};

            ItemRelay.prototype.setActive = function(bool) {
              if (!bool) {
                $buttons.removeClass('active');
              }
              if (bool) {
                return $buttons.addClass('active');
              }
            };

            ItemRelay.prototype.setState = function(bool) {
              return this.setActive(bool);
            };

            ItemRelay.prototype.enable = function(bool) {
              if (bool == null) {
                bool = true;
              }
              if (!bool) {
                $buttons.addClass('disabled');
              }
              if (bool) {
                return $buttons.removeClass('disabled');
              }
            };

            ItemRelay.prototype.disable = function() {
              return this.enable(false);
            };

            ItemRelay.prototype.setActiveButton = function(a, b) {
              return console.log("" + slot + " TODO:SETACTIVEBUTTON:", a, b);
            };

            ItemRelay.prototype.focus = function(a) {
              return console.log("" + slot + " TODO:FOCUS:", a);
            };

            ItemRelay.prototype.foreground = function(a) {
              return console.log("" + slot + " TODO:FOREGROUND:", a);
            };

            return ItemRelay;

          })();
          squirreledEditable = null;
          $buttons.on('mousedown', function(evt) {
            squirreledEditable = Aloha.activeEditable;
            return evt.preventDefault();
          });
          $buttons.on('click', function(evt) {
            evt.preventDefault();
            Aloha.activeEditable = squirreledEditable;
            return settings.click(evt);
          });
          return new ItemRelay([]);
        };
        applyHeading = function(hTag) {
          return function() {
            var $newEl, $oldEl, rangeObject;
            rangeObject = Aloha.Selection.getRangeObject();
            if (rangeObject.isCollapsed()) {
              GENTICS.Utils.Dom.extendToWord(rangeObject);
            }
            Aloha.Selection.changeMarkupOnSelection(Aloha.jQuery("<" + hTag + "></" + hTag + ">"));
            $oldEl = Aloha.jQuery(rangeObject.getCommonAncestorContainer());
            $newEl = Aloha.jQuery(Aloha.Selection.getRangeObject().getCommonAncestorContainer());
            return $newEl.addClass($oldEl.attr('class'));
          };
        };
        order = ['p', 'h1', 'h2', 'h3'];
        labels = {
          'p': 'Normal Text',
          'h1': 'Heading 1',
          'h2': 'Heading 2',
          'h3': 'Heading 3'
        };
        headingButtons = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = order.length; _i < _len; _i++) {
            h = order[_i];
            _results.push(new appmenu.custom.Heading("<" + h + " />", labels[h], {
              accel: "Ctrl+" + (h.charAt(1) || 0),
              action: applyHeading(h)
            }));
          }
          return _results;
        })();
        headingsButton = new appmenu.ToolButton("Heading 1", {
          subMenu: new appmenu.Menu(headingButtons, 'custom-headings')
        });
        return Aloha.bind("aloha-selection-changed", function(event, rangeObject) {
          var $el, i, isActive, _i, _len, _results;
          $el = Aloha.jQuery(rangeObject.startContainer);
          _results = [];
          for (i = _i = 0, _len = order.length; _i < _len; i = ++_i) {
            h = order[i];
            isActive = $el.parents(h).length > 0;
            headingButtons[i].setChecked(isActive);
            if (isActive) {
              _results.push(headingsButton.setText(labels[h]));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        });
      },
      /*
           toString method
      */

      toString: function() {
        return "toolbar";
      }
    });
  });

}).call(this);
