// Generated by CoffeeScript 1.3.3
(function() {

  define(["aloha", "aloha/plugin", "ui/ui", '../../appmenu/appmenu', "i18n!format/nls/i18n", "i18n!aloha/nls/i18n", "aloha/console", "css!simpletoolbar/css/simpletoolbar.css"], function(Aloha, Plugin, Ui, appmenu, i18n, i18nCore) {
    var CONTAINER_JQUERY;
    CONTAINER_JQUERY = jQuery('.toolbar');
    if (CONTAINER_JQUERY.length === 0) {
      CONTAINER_JQUERY = jQuery('<div></div>').addClass('toolbar-container').appendTo('body');
    }
    /*
       register the plugin with unique name
    */

    return Plugin.create("simpletoolbar", {
      defaults: {
        'initfloat': false,
        'menu': [
          'undo', 'redo', '', 'bold', 'italic', 'underline', 'superscript', 'subscript', '', 'unorderedList', 'orderedList', '', {
            text: 'Table',
            icon: 'aloha-table-insert',
            subMenu: ['createTable', 'addrowbefore', 'addrowafter', 'addcolumnbefore', 'addcolumnafter', '', 'deleterow', 'deletecolumn']
          }, {
            text: 'insertImage',
            icon: 'aloha-image-insert'
          }
        ]
      },
      init: function() {
        var applyHeading, item, labels, order, plugin, recurse, toolbar, toolbarLookup, _i, _len, _ref;
        window.toolbar = toolbar = new appmenu.ToolBar();
        toolbar.el.appendTo(CONTAINER_JQUERY);
        toolbar.el.addClass('aloha');
        toolbarLookup = {};
        recurse = function(item, lookupMap) {
          var icon, menuItem, subItem, subItems, subMenu;
          if ('string' === $.type(item)) {
            if ('' === item) {
              return new appmenu.Separator();
            }
            menuItem = new appmenu.ToolButton(item);
            lookupMap[item] = menuItem;
            return menuItem;
          } else {
            subItems = (function() {
              var _i, _len, _ref, _results;
              _ref = item.subMenu || [];
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                subItem = _ref[_i];
                _results.push(recurse(subItem, lookupMap));
              }
              return _results;
            })();
            icon = item.icon || null;
            if (subItems.length) {
              subMenu = new appmenu.Menu(subItems);
              menuItem = new appmenu.ToolButton(item.text, {
                subMenu: subMenu,
                iconCls: icon
              });
            } else {
              menuItem = new appmenu.ToolButton(item.text, {
                iconCls: icon
              });
              lookupMap[item.text] = menuItem;
            }
            return menuItem;
          }
        };
        _ref = this.settings.menu;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          toolbar.append(recurse(item, toolbarLookup));
        }
        Ui.__old_adopt = Ui.adopt;
        plugin = this;
        Ui.adopt = function(slot, type, settings) {
          var ItemRelay;
          if (plugin.settings.initfloat) {
            try {
              Ui.__old_adopt(slot, type, settings);
            } catch (err) {

            }
          }
          ItemRelay = (function() {

            function ItemRelay(items) {
              this.items = items;
            }

            ItemRelay.prototype.show = function() {
              var _j, _len1, _ref1, _results;
              _ref1 = this.items;
              _results = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                item = _ref1[_j];
                _results.push(item.setHidden(false));
              }
              return _results;
            };

            ItemRelay.prototype.hide = function() {
              var _j, _len1, _ref1, _results;
              _ref1 = this.items;
              _results = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                item = _ref1[_j];
                _results.push(item.setHidden(true));
              }
              return _results;
            };

            ItemRelay.prototype.setActive = function(bool) {
              var _j, _len1, _ref1, _results;
              _ref1 = this.items;
              _results = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                item = _ref1[_j];
                _results.push(item.setChecked(bool));
              }
              return _results;
            };

            ItemRelay.prototype.setState = function(bool) {
              return this.setActive(bool);
            };

            ItemRelay.prototype.enable = function(bool) {
              var _j, _len1, _ref1, _results;
              if (bool == null) {
                bool = true;
              }
              _ref1 = this.items;
              _results = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                item = _ref1[_j];
                _results.push(item.setDisabled(!bool));
              }
              return _results;
            };

            ItemRelay.prototype.disable = function() {
              var _j, _len1, _ref1, _results;
              _ref1 = this.items;
              _results = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                item = _ref1[_j];
                _results.push(item.setDisabled(true));
              }
              return _results;
            };

            ItemRelay.prototype.setActiveButton = function(a, b) {
              return console.log("" + slot + " TODO:SETACTIVEBUTTON:", a, b);
            };

            ItemRelay.prototype.focus = function(a) {
              return console.log("" + slot + " TODO:FOCUS:", a);
            };

            ItemRelay.prototype.foreground = function(a) {
              return console.log("" + slot + " TODO:FOREGROUND:", a);
            };

            return ItemRelay;

          })();
          if (slot in toolbarLookup) {
            item = toolbarLookup[slot];
          } else {
            item = new appmenu.ToolButton('DUMMY_ITEM_THAT_SQUASHES_STATE_CHANGES');
          }
          item.setText(settings.tooltip);
          item.setIcon(settings.icon);
          item.setAction(settings.click);
          item.element = item.el;
          return new ItemRelay([item]);
        };
        applyHeading = function() {
          var $newEl, $oldEl, rangeObject;
          rangeObject = Aloha.Selection.getRangeObject();
          if (rangeObject.isCollapsed()) {
            GENTICS.Utils.Dom.extendToWord(rangeObject);
          }
          Aloha.Selection.changeMarkupOnSelection(Aloha.jQuery(this.markup));
          $oldEl = Aloha.jQuery(rangeObject.getCommonAncestorContainer());
          $newEl = Aloha.jQuery(Aloha.Selection.getRangeObject().getCommonAncestorContainer());
          return $newEl.addClass($oldEl.attr('class'));
        };
        order = ['p', 'h1', 'h2', 'h3'];
        labels = {
          'p': 'Normal Text',
          'h1': 'Heading 1',
          'h2': 'Heading 2',
          'h3': 'Heading 3'
        };
        return Aloha.bind("aloha-selection-changed", function(event, rangeObject) {
          var $el, h, i, isActive, _j, _len1, _results;
          $el = Aloha.jQuery(rangeObject.startContainer);
          _results = [];
          for (i = _j = 0, _len1 = order.length; _j < _len1; i = ++_j) {
            h = order[i];
            _results.push(isActive = $el.parents(h).length > 0);
          }
          return _results;
        });
      },
      /*
           toString method
      */

      toString: function() {
        return "simpletoolbar";
      }
    });
  });

}).call(this);
