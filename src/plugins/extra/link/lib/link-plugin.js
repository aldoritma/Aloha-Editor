// Generated by CoffeeScript 1.3.3
(function() {

  define(['aloha', 'aloha/plugin', 'jquery', 'ui/port-helper-attribute-field', 'ui/ui', 'ui/scopes', 'ui/surface', 'ui/button', 'ui/toggleButton', '../../bubble/lib/bubble-plugin', 'i18n!link/nls/i18n', 'i18n!aloha/nls/i18n', 'aloha/console', 'link/../extra/linklist'], function(Aloha, Plugin, jQuery, AttributeField, Ui, Scopes, Surface, Button, ToggleButton, Bubbler, i18n, i18nCore, console) {
    'use strict';

    var GENTICS, Helper, canvas, filter, findMarkup, helpers, newValue, oldValue, pluginNamespace, populator, selectionChangeHandler, selector, showModalDialog;
    canvas = jQuery('<div class="aloha"></div>').appendTo('body');
    showModalDialog = function($a) {
      var appendOption, dialog, figuresAndTables, onCancel, onOk, orgElements, root, select;
      root = Aloha.activeEditable.obj;
      dialog = jQuery('<div class="link-chooser">').appendTo(canvas);
      select = jQuery('<select class="link-list" size="5"></select>');
      select.appendTo(dialog);
      appendOption = function(id, contentsToClone) {
        var clone, contents, option;
        clone = contentsToClone[0].cloneNode(true);
        contents = jQuery(clone).contents();
        option = jQuery('<option></option>');
        option.attr('value', '#' + id);
        option.append(contents);
        return option.appendTo(select);
      };
      orgElements = root.find('h1,h2,h3,h4,h5,h6');
      figuresAndTables = root.find('figure,table');
      orgElements.filter(':not([id])').each(function() {
        return jQuery(this).attr('id', GENTICS.Utils.guid());
      });
      orgElements.each(function() {
        var id, item;
        item = jQuery(this);
        id = item.attr('id');
        return appendOption(id, item);
      });
      figuresAndTables.each(function() {
        var caption, id, item;
        item = jQuery(this);
        id = item.attr('id');
        caption = item.find('caption,figcaption');
        return appendOption(id, caption);
      });
      select.val($a.attr('href'));
      onOk = function() {
        if (select.val()) {
          $a.attr('href', select.val());
          return jQuery(this).dialog('close');
        }
      };
      onCancel = function() {
        return jQuery(this).dialog('close');
      };
      dialog.dialog({
        modal: true,
        buttons: {
          OK: onOk,
          Cancel: onCancel
        }
      });
      return dialog;
    };
    selector = 'a';
    filter = function() {
      return this.nodeName.toLowerCase() === 'a';
    };
    populator = function($el, $bubble) {
      var a, change, href, that;
      that = this;
      href = $el.attr('href');
      a = jQuery('<a target="_blank" rel="noreferrer"></a>').appendTo($bubble);
      a.attr('href', href);
      a.append(href);
      $bubble.append(' - ');
      change = jQuery('<a href="javascript:void">Change</a>');
      return change.appendTo($bubble).on('mousedown', function() {
        var dialog;
        dialog = showModalDialog($el);
        dialog.addClass('aloha');
        return dialog.on('dialogclose', function() {
          a.attr('href', $el.attr('href'));
          a.contents().remove();
          return a.append($el.attr('href'));
        });
      });
    };
    helpers = [];
    Helper = (function() {

      function Helper(selector, populator, filter) {
        this.selector = selector;
        this.populator = populator;
        this.filter = filter;
      }

      Helper.prototype.start = function(editable) {
        return new Bubbler(this.populator, jQuery(editable.obj), this.selector);
      };

      Helper.prototype.stop = function(editable) {
        var $nodes;
        jQuery(editable.obj).undelegate(this.selector, '.bubble');
        $nodes = jQuery(editable.obj).find(this.selector);
        $nodes.data('aloha-bubble-el', null);
        $nodes.data('aloha-bubble-openTimer', 0);
        $nodes.data('aloha-bubble-closeTimer', 0);
        $nodes.data('aloha-bubble-hovered', false);
        return jQuery('body').find('.bubble').remove();
      };

      return Helper;

    })();
    helpers.push(new Helper(selector, populator, filter));
    findMarkup = function(range, filter) {
      if (range == null) {
        range = Aloha.Selection.getRangeObject();
      }
      if (Aloha.activeEditable) {
        return range.findMarkup(filter, Aloha.activeEditable.obj);
      } else {
        return null;
      }
    };
    selectionChangeHandler = function(rangeObject, filter) {
      var enteredLinkScope, foundMarkup;
      enteredLinkScope = false;
      if (Aloha.Selection.isSelectionEditable() && (Aloha.activeEditable != null)) {
        foundMarkup = findMarkup(rangeObject, filter);
        enteredLinkScope = foundMarkup;
      }
      return enteredLinkScope;
    };
    GENTICS = window.GENTICS;
    pluginNamespace = 'aloha-bubble-link';
    oldValue = '';
    newValue = void 0;
    return Plugin.create('bubble-link', {
      init: function() {
        var that;
        that = this;
        return jQuery.each(helpers, function(i, helper) {
          var enteredLinkScope, insideScope;
          insideScope = false;
          enteredLinkScope = false;
          Aloha.bind('aloha-editable-activated', function(event, data) {
            return helper.start(data.editable);
          });
          Aloha.bind('aloha-editable-deactivated', function(event, data) {
            helper.stop(data.editable);
            insideScope = false;
            return enteredLinkScope = false;
          });
          return Aloha.bind('aloha-selection-changed', function(event, rangeObject) {
            var link;
            if (Aloha.activeEditable) {
              enteredLinkScope = selectionChangeHandler(rangeObject, helper.filter);
              if (insideScope !== enteredLinkScope) {
                link = rangeObject.getCommonAncestorContainer();
                if (enteredLinkScope) {
                  jQuery(link).trigger('open.bubble');
                } else {
                  jQuery(Aloha.activeEditable.obj).find(helper.selector).trigger('close.bubble');
                }
              }
            }
            return insideScope = enteredLinkScope;
          });
        });
      }
    });
  });

}).call(this);
