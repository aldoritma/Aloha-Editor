// Generated by CoffeeScript 1.3.3
(function() {

  define(["aloha", "aloha/plugin", "jquery", "ui/port-helper-attribute-field", "ui/ui", "ui/scopes", "ui/surface", "ui/button", "ui/toggleButton", "../../bubble/lib/bubble-plugin", "i18n!link/nls/i18n", "i18n!aloha/nls/i18n", "aloha/console", "link/../extra/linklist"], function(Aloha, Plugin, jQuery, AttributeField, Ui, Scopes, Surface, Button, ToggleButton, Bubbler, i18n, i18nCore, console) {
    var GENTICS, newValue, oldValue, pluginNamespace, selectionChangeHandler;
    selectionChangeHandler = function(that, rangeObject) {
      var enteredLinkScope, foundMarkup;
      foundMarkup = void 0;
      enteredLinkScope = false;
      if (!that.ignoreNextSelectionChangedEvent && Aloha.Selection.isSelectionEditable() && (Aloha.activeEditable != null)) {
        foundMarkup = that.findLinkMarkup(rangeObject);
        if (foundMarkup) {
          Aloha.trigger("aloha-link-selected");
          enteredLinkScope = true;
        } else {
          Aloha.trigger("aloha-link-unselected");
        }
      } else {
        that.toggleLinkScope(false);
      }
      that.ignoreNextSelectionChangedEvent = false;
      return enteredLinkScope;
    };
    "use strict";

    GENTICS = window.GENTICS;
    pluginNamespace = "aloha-link";
    oldValue = "";
    newValue = void 0;
    return Plugin.create("link", {
      init: function() {
        return this.subscribeEvents();
      },
      subscribeEvents: function() {
        var insideLinkScope, isEnabled, that;
        that = this;
        isEnabled = {};
        Aloha.bind("aloha-editable-activated", function(event, data) {
          return new Bubbler(that._createDisplayer.bind(that), jQuery(data.editable.obj), "a");
        });
        Aloha.bind("aloha-editable-deactivated", function(event, data) {});
        insideLinkScope = false;
        return Aloha.bind("aloha-selection-changed", function(event, rangeObject) {
          var enteredLinkScope, link;
          enteredLinkScope = false;
          if (Aloha.activeEditable) {
            enteredLinkScope = selectionChangeHandler(that, rangeObject);
            if (insideLinkScope !== enteredLinkScope) {
              link = rangeObject.getCommonAncestorContainer();
              if (enteredLinkScope) {
                jQuery(link).trigger("open.bubble");
              } else {
                jQuery(Aloha.activeEditable.obj).find("a").trigger("close.bubble");
              }
            }
          }
          return insideLinkScope = enteredLinkScope;
        });
      },
      addLinkEventHandlers: function(link) {
        return new Bubbler(this._createDisplayer.bind(this), jQuery(link));
      },
      _createDisplayer: function($el, $bubble) {
        var a, change, href, that;
        that = this;
        href = $el.attr("href");
        a = jQuery("<a target=\"_blank\" rel=\"noreferrer\"></a>").appendTo($bubble);
        a.attr("href", href);
        a.append(href);
        $bubble.append(" - ");
        change = jQuery("<a href=\"javascript:void\">Change</a>");
        return change.appendTo($bubble).on("mousedown", function() {
          var dialog;
          dialog = that.showModalDialog($el);
          dialog.addClass("aloha");
          return dialog.on("dialogclose", function() {
            a.attr("href", $el.attr("href"));
            a.contents().remove();
            return a.append($el.attr("href"));
          });
        });
      },
      findLinkMarkup: function(range) {
        if (typeof range === "undefined") {
          range = Aloha.Selection.getRangeObject();
        }
        if (Aloha.activeEditable) {
          return range.findMarkup((function() {
            return this.nodeName.toLowerCase() === "a";
          }), Aloha.activeEditable.obj);
        } else {
          return null;
        }
      },
      showModalDialog: function($a) {
        var appendOption, cancelled, dialog, figuresAndTables, onCancel, onClose, onOk, orgElements, root, select;
        root = Aloha.activeEditable.obj;
        dialog = jQuery("<div class=\"link-chooser\">");
        select = jQuery("<select class=\"link-list\" size=\"5\"></select>");
        select.appendTo(dialog);
        appendOption = function(id, contentsToClone) {
          var clone, contents, option;
          clone = contentsToClone[0].cloneNode(true);
          contents = jQuery(clone).contents();
          option = jQuery("<option></option>");
          option.attr("value", "#" + id);
          option.append(contents);
          return option.appendTo(select);
        };
        orgElements = root.find("h1,h2,h3,h4,h5,h6");
        figuresAndTables = root.find("figure,table");
        orgElements.filter(":not([id])").each(function() {
          return jQuery(this).attr("id", GENTICS.Utils.guid());
        });
        orgElements.each(function() {
          var id, item;
          item = jQuery(this);
          id = item.attr("id");
          return appendOption(id, item);
        });
        figuresAndTables.each(function() {
          var caption, id, item;
          item = jQuery(this);
          id = item.attr("id");
          caption = item.find("caption,figcaption");
          return appendOption(id, caption);
        });
        select.val($a.attr("href"));
        cancelled = null;
        onOk = function() {
          if (select.val()) {
            $a.attr("href", select.val());
            return jQuery(this).dialog("close");
          }
        };
        onCancel = function() {
          return jQuery(this).dialog("close");
        };
        onClose = function() {};
        dialog.dialog({
          modal: true,
          buttons: {
            OK: onOk,
            Cancel: onCancel
          }
        });
        return dialog;
      }
    });
  });

}).call(this);
