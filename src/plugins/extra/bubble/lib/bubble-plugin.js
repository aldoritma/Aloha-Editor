// Generated by CoffeeScript 1.3.3
(function() {

  define(['aloha', 'jquery', 'aloha/plugin', './bubble', './link', './figure'], function(Aloha, jQuery, Plugin, Bubbler, linkConfig, figureConfig) {
    var Bootstrap_Popover_setContent, Bootstrap_Popover_show, GENTICS, Helper, cfg, findMarkup, hack, helpers, newValue, oldValue, pluginNamespace, selectionChangeHandler, _i, _len, _ref;
    if (true) {
      Bootstrap_Popover_setContent = function() {
        var $tip, content, html, popContent, title;
        $tip = this.tip();
        title = this.getTitle();
        content = this.getContent();
        html = 'text';
        if (this.options.html) {
          html = 'html';
        }
        $tip.find('.popover-title')[html](title);
        if (html === 'html') {
          popContent = $tip.find('.popover-content > *');
          popContent.contents().remove();
          popContent.append(content);
        } else {
          $tip.find('.popover-content > *')['text'](content);
        }
        return $tip.removeClass('fade top bottom left right in');
      };
      Bootstrap_Popover_show = function() {
        var $tip, actualHeight, actualWidth, inside, placement, pos, tp;
        if (this.hasContent() && this.enabled) {
          $tip = this.tip();
          this.setContent();
          if (this.options.animation) {
            $tip.addClass("fade");
          }
          placement = (typeof this.options.placement === "function" ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement);
          inside = /in/.test(placement);
          $tip.css({
            top: 0,
            left: 0,
            display: "block"
          }).appendTo((inside ? this.$element : document.body));
          pos = this.getPosition(inside);
          actualWidth = $tip[0].offsetWidth;
          actualHeight = $tip[0].offsetHeight;
          switch ((inside ? placement.split(" ")[1] : placement)) {
            case "bottom":
              tp = {
                top: pos.top + pos.height,
                left: pos.left + pos.width / 2 - actualWidth / 2
              };
              break;
            case "top":
              tp = {
                top: pos.top - actualHeight,
                left: pos.left + pos.width / 2 - actualWidth / 2
              };
              break;
            case "left":
              tp = {
                top: pos.top + pos.height / 2 - actualHeight / 2,
                left: pos.left - actualWidth
              };
              break;
            case "right":
              tp = {
                top: pos.top + pos.height / 2 - actualHeight / 2,
                left: pos.left + pos.width
              };
          }
          return $tip.css(tp).addClass(placement).addClass("in");
        }
      };
      hack = function() {
        var proto;
        console.warn('Monkey patching Bootstrap popovers so the buttons in them are clickable');
        proto = jQuery('<div></div>').popover({}).data('popover').constructor.prototype;
        proto.setContent = Bootstrap_Popover_setContent;
        return proto.show = Bootstrap_Popover_show;
      };
      hack();
    }
    helpers = [];
    Helper = (function() {

      function Helper(selector, populator, filter) {
        this.selector = selector;
        this.populator = populator;
        this.filter = filter;
      }

      Helper.prototype.start = function(editable) {
        var $el, that;
        that = this;
        $el = jQuery(editable.obj);
        return $el.one('mouseenter', this.selector, function() {
          var $newEl;
          $newEl = jQuery(this);
          $newEl.popover({
            placement: 'bottom',
            trigger: 'hover',
            delay: {
              show: 2000,
              hide: 2000
            },
            content: function() {
              return that.populator.bind(jQuery(this))();
            }
          });
          return setTimeout(function() {
            return $newEl.trigger('mouseenter');
          }, 100);
        });
      };

      Helper.prototype.stop = function(editable) {
        var $nodes;
        return;
        jQuery(editable.obj).undelegate(this.selector, '.bubble');
        $nodes = jQuery(editable.obj).find(this.selector);
        $nodes.data('aloha-bubble-el', null);
        $nodes.data('aloha-bubble-openTimer', 0);
        $nodes.data('aloha-bubble-closeTimer', 0);
        $nodes.data('aloha-bubble-hovered', false);
        return jQuery('body').find('.bubble').remove();
      };

      return Helper;

    })();
    _ref = [linkConfig, figureConfig];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cfg = _ref[_i];
      helpers.push(new Helper(cfg.selector, cfg.populator, cfg.filter));
    }
    findMarkup = function(range, filter) {
      if (range == null) {
        range = Aloha.Selection.getRangeObject();
      }
      if (Aloha.activeEditable) {
        return range.findMarkup(filter, Aloha.activeEditable.obj);
      } else {
        return null;
      }
    };
    selectionChangeHandler = function(rangeObject, filter) {
      var enteredLinkScope, foundMarkup;
      enteredLinkScope = false;
      if (Aloha.Selection.isSelectionEditable() && (Aloha.activeEditable != null)) {
        foundMarkup = findMarkup(rangeObject, filter);
        enteredLinkScope = foundMarkup;
      }
      return enteredLinkScope;
    };
    GENTICS = window.GENTICS;
    pluginNamespace = 'aloha-bubble-link';
    oldValue = '';
    newValue = void 0;
    return Plugin.create('bubble-link', {
      init: function() {
        var that;
        that = this;
        return jQuery.each(helpers, function(i, helper) {
          var enteredLinkScope, insideScope;
          insideScope = false;
          enteredLinkScope = false;
          Aloha.bind('aloha-editable-activated', function(event, data) {
            return helper.start(data.editable);
          });
          Aloha.bind('aloha-editable-deactivated', function(event, data) {
            setTimeout(function() {
              return helper.stop(data.editable);
            }, 100);
            insideScope = false;
            return enteredLinkScope = false;
          });
          return Aloha.bind('aloha-selection-changed', function(event, rangeObject) {
            var link;
            if (Aloha.activeEditable) {
              enteredLinkScope = selectionChangeHandler(rangeObject, helper.filter);
              if (insideScope !== enteredLinkScope) {
                link = rangeObject.getCommonAncestorContainer();
                if (enteredLinkScope) {
                  jQuery(link).trigger('open.bubble');
                } else {
                  jQuery(Aloha.activeEditable.obj).find(helper.selector).trigger('close.bubble');
                }
              }
            }
            return insideScope = enteredLinkScope;
          });
        });
      }
    });
  });

}).call(this);
