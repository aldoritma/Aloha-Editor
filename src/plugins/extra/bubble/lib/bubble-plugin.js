// Generated by CoffeeScript 1.3.3
(function() {

  define(['aloha', 'jquery', 'aloha/plugin', './bubble', './link'], function(Aloha, jQuery, Plugin, Bubbler, linkConfig) {
    var GENTICS, Helper, findMarkup, helpers, newValue, oldValue, pluginNamespace, selectionChangeHandler;
    helpers = [];
    Helper = (function() {

      function Helper(selector, populator, filter) {
        this.selector = selector;
        this.populator = populator;
        this.filter = filter;
      }

      Helper.prototype.start = function(editable) {
        return new Bubbler(this.populator, jQuery(editable.obj), this.selector);
      };

      Helper.prototype.stop = function(editable) {
        var $nodes;
        jQuery(editable.obj).undelegate(this.selector, '.bubble');
        $nodes = jQuery(editable.obj).find(this.selector);
        $nodes.data('aloha-bubble-el', null);
        $nodes.data('aloha-bubble-openTimer', 0);
        $nodes.data('aloha-bubble-closeTimer', 0);
        $nodes.data('aloha-bubble-hovered', false);
        return jQuery('body').find('.bubble').remove();
      };

      return Helper;

    })();
    helpers.push(new Helper(linkConfig.selector, linkConfig.populator, linkConfig.filter));
    findMarkup = function(range, filter) {
      if (range == null) {
        range = Aloha.Selection.getRangeObject();
      }
      if (Aloha.activeEditable) {
        return range.findMarkup(filter, Aloha.activeEditable.obj);
      } else {
        return null;
      }
    };
    selectionChangeHandler = function(rangeObject, filter) {
      var enteredLinkScope, foundMarkup;
      enteredLinkScope = false;
      if (Aloha.Selection.isSelectionEditable() && (Aloha.activeEditable != null)) {
        foundMarkup = findMarkup(rangeObject, filter);
        enteredLinkScope = foundMarkup;
      }
      return enteredLinkScope;
    };
    GENTICS = window.GENTICS;
    pluginNamespace = 'aloha-bubble-link';
    oldValue = '';
    newValue = void 0;
    return Plugin.create('bubble-link', {
      init: function() {
        var that;
        that = this;
        return jQuery.each(helpers, function(i, helper) {
          var enteredLinkScope, insideScope;
          insideScope = false;
          enteredLinkScope = false;
          Aloha.bind('aloha-editable-activated', function(event, data) {
            return helper.start(data.editable);
          });
          Aloha.bind('aloha-editable-deactivated', function(event, data) {
            helper.stop(data.editable);
            insideScope = false;
            return enteredLinkScope = false;
          });
          return Aloha.bind('aloha-selection-changed', function(event, rangeObject) {
            var link;
            if (Aloha.activeEditable) {
              enteredLinkScope = selectionChangeHandler(rangeObject, helper.filter);
              if (insideScope !== enteredLinkScope) {
                link = rangeObject.getCommonAncestorContainer();
                if (enteredLinkScope) {
                  jQuery(link).trigger('open.bubble');
                } else {
                  jQuery(Aloha.activeEditable.obj).find(helper.selector).trigger('close.bubble');
                }
              }
            }
            return insideScope = enteredLinkScope;
          });
        });
      }
    });
  });

}).call(this);
