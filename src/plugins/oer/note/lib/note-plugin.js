// Generated by CoffeeScript 1.5.0
(function() {

  define(['aloha', 'aloha/plugin', 'jquery', 'aloha/ephemera', 'ui/ui', 'ui/button'], function(Aloha, Plugin, jQuery, Ephemera, UI, Button) {
    var NEW_NOTE_TEMPLATE, NOTE_DRAG_HELPER_TEMPLATE, bindNoteEventsTo, enable, mostSeniorEditableOf;
    NEW_NOTE_TEMPLATE = '<div class="note-container">\n    <div class="note-controlls">\n       <a href="" class="note-delete"><i class="icon-remove"></i></a> \n       <a href=""><i class="icon-cog"></i></a> \n    </div> \n    <div class="note">\n        <div class="title-container dropdown">\n            <a class="type" data-toggle="dropdown">Note</a>\n            <ul class="dropdown-menu">\n                <li><a href="">Note</a></li>\n                <li><a href="">Aside</a></li>\n                <li><a href="">Warning</a></li>\n                <li><a href="">Tip</a></li>\n                <li><a href="">Important</a></li>\n            </ul>\n            <span class="title" placeholder="Add a title (optional)"></span>\n        </div>\n        <div class="body" placeholder="Type the text of your note here."></div>\n    </div>\n</div>';
    NOTE_DRAG_HELPER_TEMPLATE = '<div class="note-drag-helper">\n    <div class="title">Note to Reader:</div>\n    <div class="body">Drag me to the desired location in the document</div>\n</div>';
    UI.adopt('insertNote', Button, {
      click: function(a, b, c) {
        var $newNote, range;
        range = Aloha.Selection.getRangeObject();
        $newNote = jQuery(NEW_NOTE_TEMPLATE);
        $newNote.addClass('aloha-new-note');
        GENTICS.Utils.Dom.insertIntoDOM($newNote, range, Aloha.activeEditable.obj);
        $newNote = Aloha.jQuery('.aloha-new-note');
        $newNote.removeClass('aloha-new-note');
        return enable($newNote);
      }
    });
    mostSeniorEditableOf = function($node) {
      return $node.parents('.aloha-editable').last();
    };
    Aloha.ready(function() {
      return $('#canvas').sortable({
        'beforeStop': function(e, ui) {
          if (ui.item.is('.note-container')) {
            return enable(ui.item);
          }
        }
      });
    });
    $('[note-drag-source]').append(jQuery(NEW_NOTE_TEMPLATE)).find('.note-container').draggable({
      connectToSortable: $('#canvas'),
      revert: 'invalid',
      helper: function() {
        return $(NOTE_DRAG_HELPER_TEMPLATE);
      },
      start: function(e, ui) {
        $('#canvas').addClass('aloha-block-dropzone');
        return $(ui.helper).addClass('dragging');
      },
      stop: function(e, ui) {
        return $('#canvas').removeClass('aloha-block-dropzone');
      },
      refreshPositions: true
    });
    bindNoteEventsTo = function($node) {
      if ($node.data('noteEventsInitialized')) {
        return;
      }
      $node.data('noteEventsInitialized', true);
      $node.on('mouseenter', '.aloha-block-draghandle', function() {
        return $(this).parents('.note-container').addClass('drag-active');
      }).on('mouseleave', '.aloha-block-draghandle', function() {
        if (!$(this).data('dragging')) {
          return $(this).parents('.note-container').removeClass('drag-active');
        }
      }).on('mousedown', '.aloha-block-draghandle', function() {
        return $(this).data('dragging', true);
      }).on('mouseup', '.aloha-block-draghandle', function() {
        return $(this).data('dragging', false);
      });
      $node.on('mouseover', '.note-container', function() {
        if (!$(this).find('.note-container.active').length) {
          $(this).addClass('active');
        }
        return $(this).parents('.note-container').removeClass('active');
      }).on('mouseleave', '.note-container', function() {
        return $(this).removeClass('active');
      });
      $node.on('click', '.note-container .note-delete', function(e) {
        var $note;
        e.preventDefault();
        $note = $(this).parents('.note-container').first();
        return $note.slideUp('slow', function() {
          return $note.remove();
        });
      });
      $node.on('click', '.note-container [placeholder]', function(e) {
        $(this).removeClass('placeholder');
        if ($(this).attr('placeholder') === $(this).text()) {
          return $(this).text('');
        }
      }).on('blur', '.note-container [placeholder]', function(e) {
        if (!$(this).text()) {
          $(this).text($(this).attr('placeholder'));
          return $(this).addClass('placeholder');
        }
      });
      return $node.on('click', '.note-container .title-container li a', function(e) {
        e.preventDefault();
        return $(this).parents('.title-container').first().children('.type').text($(this).text());
      });
    };
    enable = function($noteContainer) {
      var $body, $note, $title;
      $note = $noteContainer.children('.note');
      $title = $note.children('.title-container').children('.title');
      $body = $note.find('.body');
      $title.aloha();
      $body.aloha();
      $noteContainer.alohaBlock();
      bindNoteEventsTo(mostSeniorEditableOf($noteContainer));
      $title.blur();
      return $body.blur();
    };
    return Aloha.bind('aloha-editable-activated', function(evt, props) {
      return props.editable.obj.find('.note').each(function(i, note) {
        return enable(jQuery(note));
      });
    });
  });

}).call(this);
