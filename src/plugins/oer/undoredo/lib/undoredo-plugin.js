// Generated by CoffeeScript 1.6.3
(function() {
  define(['aloha', 'aloha/plugin', 'jquery', 'ui/ui', 'ui/button', './xpath'], function(Aloha, Plugin, $, Ui, Button, XPath) {
    return Plugin.create('undoredo', {
      _observer: null,
      _mutations: [],
      _versions: [],
      _ptr: 0,
      _undobutton: null,
      _redobutton: null,
      _editable: null,
      disable: function() {
        return this._observer.disconnect();
      },
      enable: function(editable) {
        this._observer.takeRecords();
        return this._observer.observe(editable, {
          attributes: false,
          childList: true,
          characterData: true,
          characterDataOldValue: true,
          subtree: true
        });
      },
      addVersion: function(node) {
        var f;
        f = document.createDocumentFragment();
        f.appendChild(node.cloneNode(true));
        this._versions.length = this._ptr;
        this._versions.push({
          xpath: XPath.xpathFor(node),
          fragment: f
        });
        if (this._versions.length > 10) {
          this._versions.shift();
        }
        return this._ptr = this._versions.length;
      },
      init: function() {
        var plugin,
          _this = this;
        plugin = this;
        Aloha.bind('aloha-editable-created', function(evt, editable) {
          if (!editable.obj.is('.aloha-root-editable')) {
            return;
          }
          plugin._editable = editable;
          plugin._observer = new MutationObserver(function(mutations) {
            if (mutations.length) {
              return plugin._mutations = plugin._mutations.concat(mutations);
            }
          });
          plugin.enable(editable.obj[0]);
          return plugin.reset(editable);
        });
        Aloha.bind('aloha-smart-content-changed', function(e, data) {
          var editable, mutation, mutations, top, _i, _len, _ref;
          editable = data.editable;
          if (!editable.obj.is('.aloha-root-editable')) {
            return;
          }
          mutations = plugin._mutations.filter(function(m) {
            return editable.obj.is(m.target) || editable.obj.has(m.target).length;
          });
          if (mutations.length) {
            top = mutations[0].target;
            _ref = mutations.slice(1);
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              mutation = _ref[_i];
              while (top.parentElement && top !== mutation.target && !$(top).has(mutation.target).length) {
                top = top.parentElement;
              }
            }
            plugin.addVersion(top);
            return plugin._mutations = [];
          }
        });
        Aloha.bind('aloha-editable-destroyed', function() {
          return plugin.disable();
        });
        this._undobutton = Ui.adopt("undo", Button, {
          tooltip: "Undo",
          icon: "aloha-icon aloha-icon-undo",
          scope: 'Aloha.continuoustext',
          click: function() {
            return _this.undo();
          }
        });
        return this._redobutton = Ui.adopt("redo", Button, {
          tooltip: "Redo",
          icon: "aloha-icon aloha-icon-redo",
          scope: 'Aloha.continuoustext',
          click: function() {
            return _this.redo();
          }
        });
      },
      restore: function(v) {
        var node;
        node = XPath.nodeFor(v.xpath);
        if (node) {
          this.disable;
          $(node).empty().append(v.fragment.firstChild.cloneNode(true).childNodes);
          return this.enable(this._editable.obj[0]);
        }
      },
      undo: function() {
        var v;
        if (this._ptr > 1) {
          this._ptr--;
          v = this._versions[this._ptr - 1];
          this.restore(v);
        }
        return this._ptr;
      },
      redo: function() {
        var v;
        if (this._ptr < this._versions.length) {
          this._ptr++;
          v = this._versions[this._ptr - 1];
          this.restore(v);
        }
        return this._ptr;
      },
      reset: function(editable) {
        this._ptr = 0;
        return this.addVersion((editable != null ? editable.obj[0] : void 0) || this._editable.obj[0]);
      }
    });
  });

}).call(this);
