// Generated by CoffeeScript 1.6.3
(function() {
  define(['aloha', 'aloha/plugin', 'jquery', 'ui/ui', 'ui/button', './xpath'], function(Aloha, Plugin, $, Ui, Button, XPath) {
    return Plugin.create('undoredo', {
      _observer: null,
      _mutations: [],
      _versions: [],
      _ptr: 0,
      _undobutton: null,
      _redobutton: null,
      _editable: null,
      disable: function() {
        return this._observer.disconnect();
      },
      enable: function(editable) {
        this._observer.takeRecords();
        return this._observer.observe(editable, {
          attributes: false,
          childList: true,
          characterData: true,
          subtree: true
        });
      },
      addVersion: function(node) {
        var f;
        f = document.createDocumentFragment();
        f.appendChild(node.cloneNode(true));
        this._versions.length = this._ptr;
        this._versions.push({
          xpath: XPath.xpathFor(node),
          fragment: f
        });
        if (this._versions.length > 10) {
          this._versions.shift();
        }
        return this._ptr = this._versions.length;
      },
      init: function() {
        var plugin,
          _this = this;
        plugin = this;
        Aloha.bind('aloha-editable-created', function(evt, editable) {
          if (!editable.obj.is('.aloha-root-editable')) {
            return;
          }
          editable.obj[0].undoScope = true;
          return plugin._editable = editable;
        });
        this._undobutton = Ui.adopt("undo", Button, {
          tooltip: "Undo",
          icon: "aloha-icon aloha-icon-undo",
          scope: 'Aloha.continuoustext',
          click: function() {
            return _this.undo();
          }
        });
        return this._redobutton = Ui.adopt("redo", Button, {
          tooltip: "Redo",
          icon: "aloha-icon aloha-icon-redo",
          scope: 'Aloha.continuoustext',
          click: function() {
            return _this.redo();
          }
        });
      },
      process: function(data) {
        var editable, mutation, mutations, top, _i, _len, _ref;
        editable = data.editable;
        if (!editable.obj.is('.aloha-root-editable')) {
          return;
        }
        console.log(data.triggerType, data.keyCode, data.keyIdentifier);
        mutations = this._mutations.filter(function(m) {
          return editable.obj.is(m.target) || editable.obj.has(m.target).length;
        });
        if (mutations.length) {
          top = mutations[0].target;
          _ref = mutations.slice(1);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            mutation = _ref[_i];
            while (top.parentElement && top !== mutation.target && !$(top).has(mutation.target).length) {
              top = top.parentElement;
            }
          }
          this.addVersion(top);
          return this._mutations = [];
        }
      },
      restore: function(v) {
        var node;
        node = XPath.nodeFor(v.xpath);
        if (node) {
          this.disable;
          $(node).empty().append(v.fragment.firstChild.cloneNode(true).childNodes);
          $(node).focus();
          return this.enable(this._editable.obj[0]);
        }
      },
      undo: function() {
        return this._editable.obj[0].undoManager.undo();
      },
      redo: function() {
        return this._editable.obj[0].undoManager.redo();
      },
      reset: function(editable) {
        this._ptr = 0;
        return this.addVersion((editable != null ? editable.obj[0] : void 0) || this._editable.obj[0]);
      }
    });
  });

}).call(this);
