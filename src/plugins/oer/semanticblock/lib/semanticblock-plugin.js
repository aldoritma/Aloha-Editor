// Generated by CoffeeScript 1.3.3
(function() {

  define(['aloha', 'block/blockmanager', 'aloha/plugin', 'aloha/pluginmanager', 'jquery', 'aloha/ephemera', 'ui/ui', 'ui/button', 'css!semanticblock/css/semanticblock-plugin.css'], function(Aloha, BlockManager, Plugin, pluginManager, jQuery, Ephemera, UI, Button) {
    var activate, activateHandlers, bindEvents, blockControls, blockDragHelper, blockTemplate, crawl, deactivate, deactivateHandlers, insertElement, pluginEvents, register;
    if (pluginManager.plugins.semanticblock) {
      return pluginManager.plugins.semanticblock;
    }
    blockTemplate = jQuery('<div class="semantic-container"></div>');
    blockControls = jQuery('<div class="semantic-controls"><button class="semantic-delete"><i class="icon-remove"></i></button><button><i class="icon-cog"></i></button></div>');
    blockDragHelper = jQuery('<div class="semantic-drag-helper"><div class="title"></div><div class="body">Drag me to the desired location in the document</div></div>');
    activateHandlers = {};
    deactivateHandlers = {};
    pluginEvents = [
      {
        name: 'mouseenter',
        selector: '.aloha-block-draghandle',
        callback: function() {
          return $(this).parents('.semantic-container').addClass('drag-active');
        }
      }, {
        name: 'mouseleave',
        selector: '.aloha-block-draghandle',
        callback: function() {
          if (!$(this).parents('.semantic-container').data('dragging')) {
            return $(this).parents('.semantic-container').removeClass('drag-active');
          }
        }
      }, {
        name: 'mousedown',
        selector: '.aloha-block-draghandle',
        callback: function(e) {
          e.preventDefault();
          return $(this).parents('.semantic-container').data('dragging', true);
        }
      }, {
        name: 'mouseup',
        selector: '.aloha-block-draghandle',
        callback: function() {
          return $(this).parents('.semantic-container').data('dragging', false);
        }
      }, {
        name: 'mouseover',
        selector: '.aloha-oer-block',
        callback: function() {
          return activate($(this));
        }
      }, {
        name: 'mouseleave',
        selector: '.semantic-container',
        callback: function() {
          if (!$(this).data('dragging')) {
            return deactivate($(this).children('.aloha-oer-block'));
          }
        }
      }, {
        name: 'click',
        selector: '.semantic-container .semantic-delete',
        callback: function(e) {
          e.preventDefault();
          return $(this).parents('.semantic-container').first().slideUp('slow', function() {
            return $(this).remove();
          });
        }
      }, {
        name: 'click',
        selector: '[placeholder]',
        callback: function() {
          $(this).removeClass('placeholder');
          if ($(this).attr('placeholder') === $(this).text()) {
            return $(this).text('');
          }
        }
      }, {
        name: 'blur',
        selector: '[placeholder]',
        callback: function() {
          if (!$(this).text()) {
            $(this).text($(this).attr('placeholder'));
            return $(this).addClass('placeholder');
          }
        }
      }, {
        name: 'click',
        selector: '.aloha-oer-block .title-container li a',
        callback: function(e) {
          e.preventDefault();
          $(this).parents('.title-container').first().children('.type').text($(this).text());
          return $(this).parents('.aloha-oer-block').first().attr('data-type', $(this).text().toLowerCase());
        }
      }
    ];
    insertElement = function(element) {};
    activate = function(element) {
      var type, _results;
      if (!element.parent('.semantic-container').length) {
        element.wrap(blockTemplate).parent().append(blockControls.clone()).alohaBlock();
        type = void 0;
        _results = [];
        for (type in activateHandlers) {
          if (element.hasClass(type)) {
            activateHandlers[type](element);
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };
    deactivate = function(element) {
      var type;
      if (element.parent('.semantic-container').length) {
        element.find('[placeholder]').trigger('click');
        type = void 0;
        for (type in deactivateHandlers) {
          if (element.hasClass(type)) {
            deactivateHandlers[type](element);
            break;
          }
        }
        element.siblings('.semantic-controls').remove();
        BlockManager.getBlock(element.parent('.semantic-container').get(0)).unblock();
        return element.unwrap();
      }
    };
    register = function(element) {
      return element.addClass('aloha-oer-block');
    };
    crawl = function(elements) {
      return jQuery('.note').not('.aloha-oer-block').each(function() {
        if (!$(this).parents('.semantic-drag-source').length) {
          return register($(this));
        }
      });
    };
    bindEvents = function(element) {
      var event, i, _results;
      if (element.data('noteEventsInitialized')) {
        return;
      }
      element.data('noteEventsInitialized', true);
      event = void 0;
      i = void 0;
      i = 0;
      _results = [];
      while (i < pluginEvents.length) {
        event = pluginEvents[i];
        element.on(event.name, event.selector, event.callback);
        _results.push(i++);
      }
      return _results;
    };
    Aloha.ready(function() {
      $('.semantic-drag-source').children().each(function() {
        var element;
        element = $(this);
        return element.draggable({
          connectToSortable: $('#canvas'),
          revert: 'invalid',
          helper: function() {
            var helper;
            helper = $(blockDragHelper).clone();
            helper.find('.title').text('im a helper');
            return helper;
          },
          start: function(e, ui) {
            $('#canvas').addClass('aloha-block-dropzone');
            return $(ui.helper).addClass('dragging');
          },
          stop: function(e, ui) {
            $('#canvas').removeClass('aloha-block-dropzone');
            return crawl();
          },
          refreshPositions: true
        });
      });
      return bindEvents($(document));
    });
    Aloha.bind('aloha-editable-created', function() {
      return crawl();
    });
    return Plugin.create('semanticblock', {
      insertAtCursor: function(template) {
        var element, range;
        element = blockTemplate.clone().append(template);
        range = Aloha.Selection.getRangeObject();
        element.addClass('semantic-temp');
        GENTICS.Utils.Dom.insertIntoDOM(element, range, Aloha.activeEditable.obj);
        element = Aloha.jQuery('.semantic-temp').removeClass('semantic-temp');
        return register(element);
      },
      appendElement: function(element, target) {
        element = blockTemplate.clone().append(element);
        element.addClass('semantic-temp');
        target.append(element);
        element = Aloha.jQuery('.semantic-temp').removeClass('semantic-temp');
        return register(element);
      },
      activateHandler: function(type, handler) {
        return activateHandlers[type] = handler;
      },
      deactivateHandler: function(type, handler) {
        return deactivateHandlers[type] = handler;
      },
      registerEvent: function(name, selector, callback) {
        return pluginEvents.push({
          name: name,
          selector: selector,
          callback: callback
        });
      }
    });
  });

}).call(this);
